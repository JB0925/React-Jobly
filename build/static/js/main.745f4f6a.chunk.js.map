{"version":3,"sources":["AppContext.js","Navbar.js","Button.js","Home.js","api.js","Helpers/helpers.js","Form.js","Hooks/hooks.js","UserInfo.js","Helpers/images.js","Card.js","CompaniesAndJobs.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","Navbar","useContext","isLoggedIn","toggleLoggedIn","username","to","id","activeClassName","onClick","Button","text","backgroundColor","applyForJob","styleObject","border","className","type","a","style","HomePage","JSON","parse","window","localStorage","getItem","optionalRender","BASE_URL","process","JoblyApi","endpoint","data","method","console","debug","url","headers","Authorization","token","params","axios","error","response","message","Array","isArray","handle","this","request","res","company","searchQuery","companies","jobs","password","user","updatedUser","jobId","undefined","applied","initialFormStates","loginFormState","signupFormState","firstName","lastName","email","searchFormState","name","formLabels","searchFormStyle","flexDirection","width","padding","marginTop","marginBottom","getCompanyorJobDataFromApi","path","getAllCompanies","getCompany","getAllJobs","Form","initialState","labels","formStyle","placeholder","setData","initalState","useState","formData","setFormData","evt","target","value","setAppData","preventDefault","action","includes","dataToSubmit","title","useFormHandler","handleChange","handleSubmit","keys","Object","values","createFormParts","map","key","idx","htmlFor","onChange","required","onSubmit","UserInfo","toggleUsername","getUserInfo","userInfo","userName","history","useHistory","handleUserData","push","register","result","login","setItem","stringify","updateUser","useUserDataUpdate","images","Card","userJobs","companyName","salary","equity","src","randomIdx","Math","floor","random","length","getRandomLogo","alt","description","CompaniesAndJobs","search","useParams","companyInfo","setCompanyInfo","useEffect","getData","handleSearchForm","useCompaniesAndJobsUpdate","addHeaderForCompany","addSearchForm","renderCards","d","uuid","Routes","confirm","exact","App","tokenIsPresent","_username","setIsLoggedIn","setUsername","setUserJobs","setUserInfo","getUser","applications","applyForJobs","fetchUserInfo","currentlyLoggedIn","removeItem","newUser","useAppUpdate","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.745f4f6a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext();\n\nexport default AppContext;","import React, { useContext } from \"react\";\nimport \"./Navbar.css\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport AppContext from \"./AppContext\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** Navbar Component\n * \n * Variables:\n *      - isLoggedIn, toggleLoggedIn, username\n *        used to determine which views to show in the Navbar,\n *        and what user information to display\n */\nconst Navbar = () => {\n    const { isLoggedIn, toggleLoggedIn, username } = useContext(AppContext);\n    return (\n        !isLoggedIn ?\n        <nav>\n            <Link to=\"/\" id=\"homeLink\">Jobly</Link>\n            <ul>\n                <li><NavLink to=\"/login\" activeClassName=\"activeLink\">Login</NavLink></li>\n                <li><NavLink to=\"/signup\" activeClassName=\"activeLink\">Sign Up</NavLink></li>\n            </ul>\n        </nav>\n        :\n        <nav>\n            <Link to=\"/\" id=\"homeLink\">Jobly</Link>\n            <ul>\n                <li><NavLink to=\"/companies\" activeClassName=\"activeLink\">Companies</NavLink></li>\n                <li><NavLink to=\"/jobs\" activeClassName=\"activeLink\">Jobs</NavLink></li>\n                <li><NavLink to=\"/profile\" activeClassName=\"activeLink\">Profile</NavLink></li>\n                <li><NavLink to=\"/\" onClick={() => toggleLoggedIn(isLoggedIn)} >Log Out {username}</NavLink></li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AppContext from \"./AppContext\";\nimport \"./Button.css\";\n\n\n/** Button Component\n * \n * Renders a button with an optional background color, optional text, and has a \"to\"\n * prop that is used if the button wraps a Link component from react-router-dom.\n * \n * Also takes an id which is used to apply for jobs.\n */\nconst Button = ({ to = null, text = \"Submit\", backgroundColor = \"dodgerblue\", id }) => {\n    const { username, applyForJob } = useContext(AppContext);\n    const styleObject = {\n        backgroundColor,\n        border: `1px solid ${backgroundColor}`\n    };\n\n    return (\n        to == null ?\n        <button className=\"formButton\" type=\"submit\" onClick={async() => await applyForJob(username, id)}>{text}</button>\n        :\n        <button className=\"button\" style={styleObject}><Link to={to}>{text}</Link></button>\n    );\n};\n\nexport default Button;","import React, { useContext } from \"react\";\nimport AppContext from \"./AppContext\";\nimport Button from \"./Button\";\nimport \"./Home.css\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** HomePage Component\n * \n * Renders the home page, withc an optional render depending on \n * whether or not the user is logged in.\n */\nconst HomePage = () => {\n    const { isLoggedIn } = useContext(AppContext);\n    const optionalRender = () => {\n        const username = JSON.parse(window.localStorage.getItem(\"username\")) || \"\";\n        return (\n            isLoggedIn ?\n            <h2>Welcome Back, {username}!</h2>\n            :\n            <div className=\"Home-buttons\">\n                <Button to=\"/login\" text=\"Login\" backgroundColor=\"dodgerblue\" />\n                <Button to=\"/signup\" text=\"Sign Up\" backgroundColor=\"dodgerblue\" />\n            </div>\n        )\n    };\n\n    return (\n        <div className=\"Home\">\n            <h1>Jobly</h1>\n            <p>All the jobs in one convenient place.</p>\n            {optionalRender()}\n        </div>\n    )\n};\n\nexport default HomePage;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interacting with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get details on all companies. */\n  static async getAllCompanies(searchQuery = {}) {\n    let res = await this.request(\"companies\", searchQuery);\n    return res.companies;\n  };\n\n  /** Get details on all jobs. */\n  static async getAllJobs(searchQuery = {}) {\n    let res = await this.request(\"jobs\", searchQuery);\n    return res.jobs;\n  };\n\n  /** Allow a user to login if they have created an account. */\n  static async login({ username, password }) {\n    let res = await this.request(\"auth/token\", {username, password}, \"post\");\n    this.token = res.token;\n    return res.token;\n  };\n\n  /** Allow a user to register on the site. */\n  static async register(user) {\n    let res = await this.request(\"auth/register\", user, \"post\");\n    return res.token;\n  };\n\n  /** Allow a logged in user to edit their profile. */\n  static async editProfile(username, updatedUser) {\n    let res = await this.request(`users/${username}`, updatedUser, \"patch\");\n    return res.user;\n  };\n  \n  /** Used to get data about a logged in user. */\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  };\n\n  /** Used to update a logged in user. */\n  static async updateUser(username, user) {\n    let res = await this.request(`users/${username}`, user, \"patch\");\n    return res.user;\n  };\n\n  /** Used to allow a logged in user to apply for jobs. */\n  static async applyForJobs(username, jobId) {\n    if (username === undefined || jobId === undefined) return;\n    let res = await this.request(`users/${username}/jobs/${jobId}`, {}, \"post\");\n    return res.applied;\n  };\n};\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;","import JoblyApi from \"../api\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** An array of objects that contains the initial form states\n * for the login, signup, and search forms.\n */\nconst initialFormStates = [\n    {\n        loginFormState: {\n            username: \"\",\n            password: \"\"\n        },\n            \n        signupFormState: {\n            username: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\"\n        },\n\n        searchFormState: {\n            name: \"\"\n        }\n    }\n];\n\n/** An object used to send form labels to each component that has a form */\nconst formLabels = {\n    username: \"Username\",\n    password: \"Password\",\n    firstName: \"First Name\",\n    lastName: \"Last Name\",\n    email: \"Email\",\n    confirm: \"Confirm password to make changes:\",\n    search: \"\"\n};\n\n// A style object for the search form.\nconst searchFormStyle = {\n    flexDirection: \"row\",\n    width: \"100%\",\n    border: \"none\",\n    padding: \"0\",\n    marginTop: \"50px\",\n    marginBottom: \"20px\",\n}\n\n// Helper function that determines which API endpoint to call based on the path and or handle passed in\nconst getCompanyorJobDataFromApi = async(path, handle = null) => {\n    if (path === \"/companies\") return await JoblyApi.getAllCompanies();\n    if (path === \"/companies/:handle\") return await JoblyApi.getCompany(handle);\n    if (path === \"/jobs\") return await JoblyApi.getAllJobs();\n};\n\nexport { initialFormStates, formLabels, searchFormStyle, getCompanyorJobDataFromApi };","import React from \"react\";\nimport { useFormHandler } from \"./Hooks/hooks\";\nimport Button from \"./Button\";\nimport \"./Form.css\";\n\n\n/** Form Component\n * \n * A reusable form component that renders the login, signup, profile, and search forms\n * \n * This component takes in initialState to set the form's state, labels to add to the form,\n * an optional style component (used in the search form) placeholders for the inputs, and a \"setData\"\n * function that is used to update state in the App component, CompaniesAndJobs component, etc., and\n * to make API calls.\n */\nconst Form = ({ initialState, labels, formStyle = {}, placeholder = \"\", setData = null }) => {\n    const [formData, handleChange, handleSubmit] = useFormHandler(initialState);\n    const keys = Object.keys(initialState);\n    const values = Object.values(labels)\n\n    const createFormParts = keys.map((key, idx) => {\n        return (\n            <>\n              <label htmlFor={values[idx]}>{values[idx]}</label>\n              <input \n                id={key}\n                name={key}\n                value={formData[key]}\n                onChange={handleChange}\n                type={key === \"password\" ? \"password\" : \"text\"}\n                placeholder={placeholder}\n                required\n              />\n            </>\n        );\n    });\n\n    return (\n        <form onSubmit={async(evt) => handleSubmit(evt, setData, formData)} style={formStyle}>\n            {createFormParts}\n            <Button />\n        </form>\n    );\n};\n\nexport default Form;","import { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport JoblyApi from \"../api\";\nimport { getCompanyorJobDataFromApi } from \"../Helpers/helpers\";\nimport Form from \"../Form\";\nimport \"../Form.css\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** useFormHandler hook\n * \n * Returns the initial state, a handleChange function that is \n * used to update the form's state, and a handleSubmit function\n * that is used to reset form state, trigger API calls, and update state\n * in higher level components\n */\nconst useFormHandler = (initalState) => {\n    const [formData, setFormData] = useState(initalState);\n\n    const handleChange = evt => {\n        const { name, value } = evt.target;\n        setFormData(formData => ({\n            ...formData,\n            [name]: value\n        }));\n    };\n\n    const handleSubmit = (evt, setAppData) => {\n        evt.preventDefault();\n        const { action } = evt.target;\n        if(!action.includes(\"signup\")  && !action.includes(\"login\") && !action.includes(\"profile\")) {\n            const isCompany = evt.target.action.includes(\"companies\");\n            const dataToSubmit = isCompany ? formData : { title: formData.name }\n        \n            setFormData(formData => initalState);\n            setAppData(dataToSubmit);\n        } else {\n            setFormData(formData => initalState);\n            setAppData(formData);\n        };\n    };\n\n    return [formData, handleChange, handleSubmit];\n};\n\n\n/** useAppUpdate hook\n * \n * The \"brains\" of the app component, used to determine if a user is logged in even when \n * opening and closing a window, toggling the isLoggedIn state, and contains functions to get\n * user data from the JoblyApi class, set the user's username in state, and apply for jobs.\n * Many of these functions are then passed via useContext to other lower level components.\n */\nconst useAppUpdate = () => {\n    const history = useHistory();\n\n    const tokenIsPresent = window.localStorage.getItem(\"token\") ? true : false;\n    const _username = JSON.parse(window.localStorage.getItem(\"username\")) || \"\";\n    \n    tokenIsPresent && (JoblyApi.token = JSON.parse(window.localStorage.getItem(\"token\")));\n\n    const [isLoggedIn, setIsLoggedIn] = useState(tokenIsPresent);\n    const [username, setUsername] = useState(_username);\n    const [userJobs, setUserJobs] = useState([]);\n    const [userInfo, setUserInfo] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\"\n    });\n    \n    const toggleLoggedIn = (currentlyLoggedIn = null) => {\n        setIsLoggedIn(isLoggedIn => !isLoggedIn);\n        currentlyLoggedIn = !currentlyLoggedIn;\n        if (!currentlyLoggedIn) {\n            window.localStorage.removeItem(\"token\");\n            window.localStorage.removeItem(\"username\");\n            history.push(\"/login\")\n        };\n    };\n\n    const toggleUsername = (newUser) => {\n        setUsername(username => newUser);\n    };\n\n    const getUserInfo = async(username) => {\n        const { firstName, lastName, email, applications } = await JoblyApi.getUser(username);\n        setUserJobs(userJobs => [...applications]);\n        setUserInfo(userInfo => ({\n            firstName,\n            lastName,\n            email\n        }));\n    };\n\n    const applyForJob = async(username, jobId) => {\n        await JoblyApi.applyForJobs(username, jobId);\n        setUserJobs(userJobs => [...userJobs, jobId]);\n    };\n\n    useEffect(() => {\n        async function fetchUserInfo(username) {\n            if (username) {\n                await getUserInfo(username);\n            }\n        };\n        fetchUserInfo(username);\n    },[username]);\n\n    return [isLoggedIn, username, userJobs, userInfo, \n            toggleLoggedIn, toggleUsername, getUserInfo, applyForJob\n        ];\n};\n\n\n/** useUserDataUpdate hook\n * \n * The \"brains\" of the user side of the app. This section contains all of the functions and data that \n * are used to set user data in state, log in a user, logout a user, and edit a user's profile. The path\n * parameter determines which choice is made within the conditional statement.\n */\nconst useUserDataUpdate = (path, toggleLoggedIn, toggleUsername, getUserInfo, userInfo, userName) => {\n    const history = useHistory();\n    const handleUserData = async(user) => {\n        if (window.localStorage.getItem(\"token\") !== null && path !== \"/profile\") return history.push(\"/companies\");\n\n        let result;\n        const username = user.username || userName;\n        if (path === \"/signup\") {\n            result = await JoblyApi.register(user);\n            history.push(\"/login\");\n        } else if (path === \"/login\") {\n            result = await JoblyApi.login(user);\n            toggleLoggedIn();\n            toggleUsername(username);\n            getUserInfo(username);\n            window.localStorage.setItem(\"token\", JSON.stringify(result));\n            window.localStorage.setItem(\"username\", JSON.stringify(username));\n            history.push(\"/\");\n        } else {\n            result = await JoblyApi.updateUser(username, user);\n            getUserInfo(username);\n            history.push(\"/companies\");\n        };\n    };\n    return [handleUserData];\n};\n\n\n/** useCompaniesAndJobsUpdate hook\n * \n * The \"brains\" of the CompaniesAndJobs component. functions used to trigger API calls, obtain \n * company and job data to render in cards, create a header for a specific company, and create a \n * search form for each page.\n */\nconst useCompaniesAndJobsUpdate = (path, jobs, searchFormState, search, formStyle, placeholder) => {\n    const { handle } = useParams();\n    const [data, setData] = useState([]);\n    const [companyInfo, setCompanyInfo] = useState({title: \"\", description: \"\"});\n\n    useEffect(() => {\n        async function getData() {\n            let result = !handle ? await getCompanyorJobDataFromApi(path) : \n                                   await getCompanyorJobDataFromApi(path, handle);\n            handle ? setData(data => [...result.jobs]) : setData(data => [...result]);\n            const { name, description } = result;\n            setCompanyInfo(companyInfo => ({ name, description }));\n        };\n        getData();\n    },[path, handle]);\n\n\n    const handleSearchForm = async(searchQuery) => {\n        let result = !jobs ? await JoblyApi.getAllCompanies(searchQuery) : \n                             await JoblyApi.getAllJobs(searchQuery);\n        \n        setData(data => [...result]);\n        const { name, description } = result;\n        setCompanyInfo(companyInfo => ({ name, description }));\n    };\n\n\n    const addHeaderForCompany = () => {\n        const { name, description } = companyInfo;\n        return (\n            <div className=\"CompaniesAndJobs-container\">\n                <h1>{name}</h1>\n                <p>{description}</p>\n            </div>\n        );\n    };\n\n    const addSearchForm = () => {\n        return (\n            <div className=\"CompaniesAndJobs-container\">\n                <Form \n                    id=\"searchForm\" \n                    initialState={searchFormState}  \n                    labels={search} \n                    formStyle={formStyle} \n                    placeholder={placeholder}\n                    setData={handleSearchForm}\n                />\n            </div>\n        )\n    };\n\n    return [data, companyInfo, addHeaderForCompany, addSearchForm];\n};\n\nexport {\n    useFormHandler,\n    useAppUpdate,\n    useUserDataUpdate,\n    useCompaniesAndJobsUpdate\n};","import React, { useContext } from \"react\";\nimport AppContext from \"./AppContext\";\nimport Form from \"./Form\";\nimport { useUserDataUpdate } from \"./Hooks/hooks\";\nimport \"./UserInfo.css\";\n\n/** UserInfo Component\n * \n * Props:\n *      - initialState: the initial form state\n *      - formLabels: the labels for each given form\n *      - title: the form's title\n *      - path: the path, such as \"/login\", etc., that allows for conditional\n *        rendering of this reusable component\n * \n * Context:\n *      - toggleLoggedIn, toggleUsername, getUserInfo: functions that set the login state of\n *        a user, and set the user data in state for other components to access\n *      - userInfo, username: data from state used to make calls to the backend API\n * \n * Hooks:\n *      - useUserDataUpdate:\n *          - returns a function, handleUserData, that takes in all of the above as args\n *          - handleUserData is passed to the form so that when it is submitted, state is updated\n *            in the app component\n */\nconst UserInfo = ({ initialState, formLabels, title, path }) => {\n    const { toggleLoggedIn, toggleUsername, getUserInfo, userInfo, username } = useContext(AppContext);\n    const [handleUserData] = useUserDataUpdate(path, toggleLoggedIn, toggleUsername, getUserInfo, userInfo, username);\n    \n    return (\n        <div className=\"UserInfo\">\n            <div className=\"UserInfo-container\">\n                <h1>{title}</h1>\n                <Form initialState={initialState} labels={formLabels} setData={handleUserData} />\n            </div>\n        </div>\n    )\n};\n\nexport default UserInfo;","/** Fake images used to render on the company cards for the fake companies. :) */\nconst images = [\n    'https://image.shutterstock.com/image-vector/finance-company-logo-vector-design-600w-1540007387.jpg',\n    'https://image.shutterstock.com/image-vector/red-trusted-seller-stamp-logo-600w-2014652267.jpg',\n    'https://image.shutterstock.com/image-vector/unique-modern-aerospace-model-logo-600w-2021852555.jpg',\n    'https://image.shutterstock.com/image-vector/designer-logo-designing-company-creative-600w-1931292683.jpg',\n    'https://image.shutterstock.com/image-vector/vector-logo-design-template-perfect-600w-1807741420.jpg',\n    'https://image.shutterstock.com/image-vector/stranger-man-wearing-hat-spy-600w-1780297649.jpg'\n];\n\nexport default images;","import React, { useContext } from \"react\";\nimport Button from \"./Button\";\nimport \"./Card.css\";\nimport images from \"./Helpers/images\";\nimport { Link } from \"react-router-dom\";\nimport AppContext from \"./AppContext\";\n\n\n/** Card Component\n * \n * The card that gets rendered for job and company data\n * \n * Params:\n *      - data: the data that gets displayed on the card\n *      - id: the job id that is used to display on the job cards\n *      - jobs: a boolean that is used to determine if the card should\n *              display job data or company data\n * \n * Context:\n *      - userJobs, from the App component, is used to determine whether\n *        a job's button says \"Apply\" or \"Applied\" by determining whether\n *        the id is in the user's jobs array.\n */\nconst Card = ({ data, id, jobs = false }) => {\n    const { userJobs } = useContext(AppContext);\n    const getRandomLogo = () => {\n        const randomIdx = Math.floor(Math.random() * images.length);\n        return images[randomIdx];\n    };\n    \n    return (\n        !jobs ?\n        <Link to={`/companies/${data.handle}`} className=\"Card\">\n            <div className=\"Card-row\">\n                <h2>{data.name}</h2>\n                <div className=\"Card-image\">\n                    <img src={getRandomLogo()} alt={data.name}></img>\n                </div>\n            </div>\n            <div className=\"Card-row\">\n                <p>{data.description}</p>\n            </div>\n        </Link>\n        :\n        <div className=\"Card\">\n            <div className=\"Card-jobcard\">\n                <h2>{data.title}</h2>\n                <h3>{data.companyName}</h3>\n            </div>\n            <div className=\"Card-jobcard\">\n                <p>Salary: {data.salary}</p>\n                <p>Equity: {data.equity}</p>\n            </div>\n            <Button text={userJobs.includes(id) ? \"Applied\" : \"Apply\"} backgroundColor=\"red\" id={id} />\n        </div>\n    );\n};\n\nexport default Card;","import React, { useContext } from \"react\";\nimport \"./CompaniesAndJobs.css\";\nimport Card from \"./Card\";\nimport { v4 as uuid } from \"uuid\";\nimport { initialFormStates, formLabels } from \"./Helpers/helpers\";\nimport { useCompaniesAndJobsUpdate } from \"./Hooks/hooks\";\nimport { Redirect } from \"react-router-dom\";\nimport AppContext from \"./AppContext\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** CompaniesAndJobs Component\n * \n * The CompaniesAndJobs component can render three different views:\n *      1). Companies: filled with Company cards with company logos\n *      2). Jobs: Filled with all available jobs and a button to apply\n *      3). Jobs for a specific company: See #2, but for only one company.\n * \n * Variables:\n *      isLoggedIn: used to determine whether or not to protect the view from \n *                  the user\n *      search, searchFormState: same as other forms; passing labels and initial state\n *                               to the search form \n *      data, companyInfo addHeaderForCompany, addSearchForm:\n *              used in the useCompaniesAndJobsUpdate hook. This hook is used to determine what\n *              to show the user and which API calls to make based on the path passed in as a prop,\n *              whether we the user wants to see Company data, job data, or a specific company's jobs.\n */\nconst CompaniesAndJobs = ({ formStyle = null, placeholder = \"\", jobs = false, path = \"\" }) => {\n    const { isLoggedIn } = useContext(AppContext)\n\n    const { searchFormState } = initialFormStates[0];\n    const { search } = formLabels;\n    const [data, companyInfo, addHeaderForCompany, addSearchForm] = \n            useCompaniesAndJobsUpdate(path, jobs, searchFormState, search, formStyle, placeholder);\n\n    \n    const renderCards = data.map(d => <Card data={d} key={uuid()} jobs={jobs} id={d.id} />);\n    return (\n        !isLoggedIn ?\n        <Redirect to=\"/login\" />\n        :\n        <div className=\"CompaniesAndJobs\">\n            {companyInfo && addHeaderForCompany()}\n            {formStyle && addSearchForm()}\n            {renderCards}\n        </div>\n    );\n};\n\nexport default CompaniesAndJobs;","import React, { useContext } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport HomePage from \"./Home\";\nimport UserInfo from \"./UserInfo\";\nimport CompaniesAndJobs from \"./CompaniesAndJobs\";\nimport { initialFormStates, formLabels, searchFormStyle } from \"./Helpers/helpers\";\nimport AppContext from \"./AppContext\";\n\n/** All of the routes for the app component for Jobly.\n * \n * variables: \n *      - loginFormState, signupFormState: the initial states for those \n *        respective form components\n *      - formLabels: all of the labels for the form component\n *      - userInfo: information about the currently logged in user. \n *            { firstName, lastName, email }\n * \n * routes:\n *      - homepage\n *      - signup / register\n *      - login\n *      - companies\n *      - jobs\n *      - jobs for a specific company\n *      - user profile\n *      - redirect component for any routes that don't have a match\n */\n\nconst Routes = () => {\n    const { loginFormState, signupFormState } = initialFormStates[0];\n    const { username, password, firstName, lastName, email, confirm } = formLabels;\n    const { userInfo } = useContext(AppContext);\n\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <HomePage />\n            </Route>\n            <Route exact path=\"/signup\">\n                <UserInfo \n                    initialState={signupFormState} \n                    formLabels={{username, password, firstName, lastName, email}}\n                    title=\"Sign Up\"\n                    path=\"/signup\"\n                 />\n            </Route>\n            <Route exact path=\"/login\">\n                <UserInfo\n                    initialState={loginFormState}\n                    formLabels={{username, password}}\n                    title=\"Login\"\n                    path=\"/login\"\n                />\n            </Route>\n            <Route exact path=\"/companies\">\n                <CompaniesAndJobs \n                    formStyle={searchFormStyle}\n                    placeholder=\"Enter a Search\"    \n                    path=\"/companies\"\n                />\n            </Route>\n            <Route exact path=\"/jobs\">\n                <CompaniesAndJobs\n                    formStyle={searchFormStyle}\n                    placeholder=\"Enter a Search\"\n                    path=\"/jobs\"\n                    jobs={true}    \n                />\n            </Route>\n            <Route path=\"/companies/:handle\">\n                <CompaniesAndJobs\n                    path=\"/companies/:handle\"\n                    jobs={true}\n                />\n            </Route>\n            <Route exact path=\"/profile\">\n                <UserInfo \n                    initialState={userInfo}\n                    formLabels={{firstName, lastName, email, confirm}}\n                    title=\"Profile\"\n                    path=\"/profile\"\n                />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n};\n\nexport default Routes;","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Routes from \"./Routes\";\nimport './App.css';\nimport { useAppUpdate } from \"./Hooks/hooks\";\nimport AppContext from \"./AppContext\";\n\n\n/** App Component\n * \n * The main component and the \"brains\" of the app.\n * \n * Hooks:\n *    - useAppUpdate:\n *        - returns an array of user data and functions used to update state\n *        - these items are passed, mainly via the useContext hook, to other \n *          components within the app.\n */\nfunction App() {\n  const [isLoggedIn, username, userJobs, userInfo, toggleLoggedIn, toggleUsername, getUserInfo, applyForJob] = useAppUpdate();\n  const value = {\n    isLoggedIn,\n    username,\n    userJobs,\n    userInfo,\n    toggleLoggedIn,\n    toggleUsername,\n    getUserInfo,\n    applyForJob\n  };\n  \n  return (\n    <AppContext.Provider value={value}>\n      <div className=\"App\">\n        <Navbar />\n        <Routes />\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}